import React, { useEffect, useState, useMemo } from "react";

// ⚡ Tech/Trading Edition — 非典雅版（高對比、科技感、交易所風格）
// - 深色介面、資訊密度高、數字採等寬字體，強調即時性與可讀性
// - 元件：拍賣列表 + 建立英式拍賣卡、拍賣詳情（出價面板、出價紀錄、價格分布圖）
// - 可於頁面右上角切換「列表 / 詳情（進行中/未開始/已結束）」與「模擬手機寬度」

// ---------- 小工具 ----------
const twd = (n: number) => new Intl.NumberFormat("zh-TW", { style: "currency", currency: "TWD", maximumFractionDigits: 0 }).format(n);
const cx = (...xs: (string | false | null | undefined)[]) => xs.filter(Boolean).join(" ");
const maskUser = (id: string) => (id.length <= 2 ? id + "*" : id[0] + "***" + id[id.length - 1]);

function useCountdown(target: number) {
  const [now, setNow] = useState(Date.now());
  useEffect(() => { const t = setInterval(() => setNow(Date.now()), 1000); return () => clearInterval(t); }, []);
  const remaining = Math.max(0, Math.floor((target - now) / 1000));
  let tone: "safe" | "warn" | "danger" = "safe";
  if (remaining <= 60) tone = "danger"; else if (remaining <= 300) tone = "warn";
  return { remaining, tone };
}

function RemainingText({ remaining }: { remaining: number }) {
  const m = Math.floor(remaining / 60), s = remaining % 60, h = Math.floor(m / 60), mm = m % 60;
  if (h > 0) return <span>{h} 小時 {mm} 分 {s} 秒</span>;
  if (m > 0) return <span>{m} 分 {s} 秒</span>;
  return <span>{s} 秒</span>;
}

// ---------- 假資料 ----------
const MOCK_LIST = Array.from({ length: 9 }).map((_, i) => ({
  id: 9000 + i,
  title: `企業設備拍賣 #${9000 + i}`,
  seller: i % 2 ? "星河工業" : "大樹科技",
  img: i % 2
    ? "radial-gradient(1200px_600px_at_20%_-10%,rgba(34,211,238,.15),transparent),linear-gradient(135deg,#0b1220,#0f172a)"
    : "radial-gradient(1200px_600px_at_80%_-10%,rgba(99,102,241,.15),transparent),linear-gradient(135deg,#0b1220,#0f172a)",
  currentPrice: 500000 + i * 25000,
  reserveMet: i % 3 !== 0,
  endAt: Date.now() + (i + 1) * 1000 * 60 * 12,
  bids: 20 + i * 3,
}));

const MOCK_BIDS = () => {
  const base = Date.now();
  return Array.from({ length: 16 }).map((_, i) => ({
    id: 55000 + i,
    user: i % 2 ? "benny09" : "alice77",
    amount: 600000 + i * 10000,
    at: base - (16 - i) * 1000 * 32,
    proxy: i % 5 === 0,
  }));
};

const MOCK_BUCKETS = [
  { min: 580000, max: 590000, count: 2 },
  { min: 590000, max: 600000, count: 4 },
  { min: 600000, max: 610000, count: 6 },
  { min: 610000, max: 620000, count: 8 },
  { min: 620000, max: 630000, count: 11 },
  { min: 630000, max: 640000, count: 7 },
  { min: 640000, max: 650000, count: 3 },
];

// ---------- 圖表：直方圖（SVG） ----------
function Histogram({ buckets, p50, p90, p99 }: { buckets: { min: number; max: number; count: number }[]; p50: number; p90: number; p99: number }) {
  const width = 560, height = 180, pad = 24;
  const maxCount = Math.max(...buckets.map(b => b.count));
  const minX = buckets[0].min, maxX = buckets[buckets.length - 1].max;
  const x = (v: number) => pad + ((v - minX) / (maxX - minX)) * (width - pad * 2);
  const y = (c: number) => height - pad - (c / maxCount) * (height - pad * 2);

  return (
    <svg viewBox={`0 0 ${width} ${height}`} className="w-full h-[200px]">
      <rect x={0} y={0} width={width} height={height} rx={12} className="fill-slate-900" />
      <line x1={pad} y1={height - pad} x2={width - pad} y2={height - pad} className="stroke-slate-700" />
      {buckets.map((b, i) => {
        const barW = (x(b.max) - x(b.min)) * 0.8;
        const cx = (x(b.min) + x(b.max)) / 2 - barW / 2;
        const top = y(b.count);
        return <rect key={i} x={cx} y={top} width={barW} height={(height - pad) - top} className="fill-cyan-500/70 hover:fill-cyan-400 transition-colors" rx={4} />;
      })}
      {[{ v: p50, c: "stroke-emerald-400" }, { v: p90, c: "stroke-amber-400" }, { v: p99, c: "stroke-rose-400" }].map((l, i) => (
        <g key={i}>
          <line x1={x(l.v)} x2={x(l.v)} y1={pad} y2={height - pad} className={cx(l.c, "stroke-[2]")} />
        </g>
      ))}
    </svg>
  );
}

// ---------- 拍賣卡片（列表） ----------
function AuctionCard({ item, onOpen }: { item: any; onOpen: (id: number) => void }) {
  const { remaining, tone } = useCountdown(item.endAt);
  return (
    <div className="rounded-lg bg-slate-900 ring-1 ring-slate-800 overflow-hidden shadow hover:shadow-cyan-500/10 transition-all">
      <div className="h-40 w-full" style={{ background: item.img }} />
      <div className="p-4 space-y-3">
        <div className="text-xs text-slate-400">{item.seller}</div>
        <h3 className="font-semibold leading-tight line-clamp-1 text-slate-100">{item.title}</h3>
        <div className="flex items-center justify-between text-sm">
          <div>
            <div className="text-slate-400">目前出價</div>
            <div className="font-mono font-semibold text-2xl text-cyan-400">{twd(item.currentPrice)}</div>
          </div>
          <div className="text-right">
            <div className="text-slate-400">剩餘</div>
            <div className={cx("font-medium", tone === "danger" && "text-rose-300", tone === "warn" && "text-amber-300", tone === "safe" && "text-slate-300")}> <RemainingText remaining={remaining} /> </div>
          </div>
        </div>
        <div className="flex items-center justify-between text-xs text-slate-400">
          <span>出價 {item.bids} 次</span>
          <span className={cx("px-2 py-0.5 rounded bg-slate-800", item.reserveMet ? "text-emerald-300" : "text-slate-300")}>{item.reserveMet ? "已達保留價" : "未達保留價"}</span>
        </div>
        <button onClick={() => onOpen(item.id)} className="mt-1.5 w-full rounded-md bg-cyan-500 text-slate-900 py-2 font-semibold hover:bg-cyan-400">查看詳情</button>
      </div>
    </div>
  );
}

// ---------- 出價紀錄 ----------
function BidHistory({ bids, anonymize }: { bids: any[]; anonymize: boolean }) {
  return (
    <div className="divide-y divide-slate-800">
      {bids.map((b) => (
        <div key={b.id} className="flex items-center justify-between py-2 text-sm">
          <div className="text-slate-400 w-40">{new Date(b.at).toLocaleTimeString()}</div>
          <div className="flex-1">
            <span className="text-slate-200">{anonymize ? maskUser(b.user) : b.user}</span>
            {b.proxy && <span className="ml-2 text-[11px] text-cyan-300 rounded px-2 py-0.5 bg-cyan-500/10 ring-1 ring-cyan-500/30">代理出價</span>}
          </div>
          <div className="font-mono font-medium text-slate-100">{twd(b.amount)}</div>
        </div>
      ))}
    </div>
  );
}

// ---------- 右側：即時出價面板（交易所風） ----------
function LiveBidPanel({
  status,
  currentPrice,
  minIncrement,
  endAt,
  reserveMet,
  buyNow,
  anonymize,
  onPlaceBid,
  lastExtendedAt,
}: {
  status: "RUNNING" | "SCHEDULED" | "ENDED";
  currentPrice: number; minIncrement: number; endAt: number; reserveMet: boolean;
  buyNow?: number | null; anonymize: boolean; onPlaceBid: (amount: number) => void;
  lastExtendedAt?: number | null;
}) {
  const { remaining, tone } = useCountdown(endAt);
  const [amount, setAmount] = useState(currentPrice + minIncrement);
  const [blink, setBlink] = useState(false);
  useEffect(() => { setAmount(currentPrice + minIncrement); setBlink(true); const t = setTimeout(() => setBlink(false), 600); return () => clearTimeout(t); }, [currentPrice, minIncrement]);
  const disabled = status !== "RUNNING";

  return (
    <div className="sticky top-4 rounded-lg ring-1 ring-slate-800 p-6 bg-slate-900 shadow space-y-5">
      <div className="text-xs text-slate-400">目前出價</div>
      <div className={cx("text-3xl font-mono font-semibold tracking-tight", blink && "shadow-[0_0_0_9999px_rgba(34,211,238,0.06)_inset] text-cyan-300")}>{twd(currentPrice)}</div>

      <div className="flex items-center gap-2">
        <div className="text-xs text-slate-400">結束倒數</div>
        <div className={cx("text-sm font-medium px-2 py-1 rounded ring-1", tone === "danger" && "bg-rose-500/10 text-rose-300 ring-rose-500/30", tone === "warn" && "bg-amber-500/10 text-amber-300 ring-amber-500/30", tone === "safe" && "bg-slate-800 text-slate-300 ring-slate-700")}>
          <RemainingText remaining={remaining} />
        </div>
        {lastExtendedAt && Date.now() - lastExtendedAt < 5000 && (
          <div className="ml-auto text-[11px] bg-cyan-500/10 text-cyan-300 px-2 py-1 rounded ring-1 ring-cyan-500/30">已延長 +60s</div>
        )}
      </div>

      <div className="grid grid-cols-3 gap-2 text-sm">
        <div className="rounded bg-slate-800 p-3 ring-1 ring-slate-700">
          <div className="text-slate-400">最小加價</div>
          <div className="font-mono font-medium text-slate-100">{twd(minIncrement)}</div>
        </div>
        <div className="rounded bg-slate-800 p-3 ring-1 ring-slate-700">
          <div className="text-slate-400">保留價</div>
          <div className={cx("font-medium", reserveMet ? "text-emerald-300" : "text-slate-300")}>{reserveMet ? "已達" : "未達"}</div>
        </div>
        <div className="rounded bg-slate-800 p-3 ring-1 ring-slate-700">
          <div className="text-slate-400">匿名出價</div>
          <div className="font-medium">{anonymize ? "是" : "否"}</div>
        </div>
      </div>

      <div className="space-y-2">
        <label className="text-sm text-slate-300">出價金額</label>
        <div className="flex gap-2">
          <input type="number" className="flex-1 rounded bg-slate-950 ring-1 ring-slate-800 px-3 py-2 text-slate-100 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-cyan-400" value={amount} onChange={e => setAmount(Number(e.target.value))} />
          <button className="rounded ring-1 ring-slate-700 px-3 py-2 text-sm hover:bg-slate-800" onClick={() => setAmount(currentPrice + minIncrement)}>填入最低</button>
        </div>
        <div className="flex gap-2 text-xs">
          {[1,2,5].map(x => (
            <button key={x} className="px-3 py-1.5 rounded bg-slate-800 ring-1 ring-slate-700 hover:bg-slate-700" onClick={() => setAmount((v) => v + minIncrement * x)}>+{x} 檔</button>
          ))}
        </div>
      </div>

      <button disabled={disabled} onClick={() => onPlaceBid(amount)} className={cx("w-full rounded-md py-3 font-semibold", disabled ? "bg-slate-800 text-slate-500" : "bg-cyan-500 text-slate-900 hover:bg-cyan-400")}>{status === "RUNNING" ? "出價" : status === "SCHEDULED" ? "尚未開始" : "已結束"}</button>

      {!!buyNow && (
        <button disabled={disabled} className={cx("w-full rounded-md py-2 font-semibold ring-1", disabled ? "ring-slate-800 text-slate-600" : "ring-cyan-500/40 text-cyan-300 hover:bg-cyan-500/10")}>直購 {twd(buyNow)}</button>
      )}

      <div className="text-[11px] text-slate-400">出價即表示同意拍賣規則，並受反狙擊條款影響（臨近結束將自動延長）。</div>
    </div>
  );
}

// ---------- 詳情頁 ----------
function AuctionDetail({ variant }: { variant: "RUNNING" | "SCHEDULED" | "ENDED" }) {
  const [currentPrice, setCurrentPrice] = useState(630000);
  const minIncrement = 10000;
  const [reserveMet, setReserveMet] = useState(true);
  const [endAt, setEndAt] = useState(Date.now() + 1000 * 60 * 2 + 1000 * 20);
  const [bids, setBids] = useState(MOCK_BIDS());
  const [anonymize, setAnonymize] = useState(false);
  const [lastExtendedAt, setLastExtendedAt] = useState<number | null>(null);

  function placeBid(amount: number) {
    const newBid = { id: Math.floor(Math.random() * 100000), user: "you", amount, at: Date.now(), proxy: false };
    setBids((prev) => [newBid, ...prev].slice(0, 50));
    if (amount >= currentPrice + minIncrement) setCurrentPrice(amount);
    const remaining = Math.max(0, Math.floor((endAt - Date.now()) / 1000));
    if (remaining <= 180) { setEndAt((t) => t + 60_000); setLastExtendedAt(Date.now()); }
  }

  const p50 = 620000, p90 = 640000, p99 = 648000;

  return (
    <div className="grid grid-cols-1 xl:grid-cols-12 gap-8">
      {/* 左側主內容 */}
      <div className="xl:col-span-8 space-y-6">
        <div className="rounded-lg ring-1 ring-slate-800 bg-slate-900 overflow-hidden shadow">
          <div className="grid grid-cols-3 gap-1 h-80">
            <div className="col-span-2 h-full" style={{ background: "radial-gradient(1000px_500px_at_20%_-10%,rgba(34,211,238,.12),transparent),linear-gradient(135deg,#0b1220,#0f172a)" }} />
            <div className="flex flex-col gap-1">
              {Array.from({ length: 4 }).map((_, i) => (
                <div key={i} className="flex-1" style={{ background: i % 2 ? "linear-gradient(135deg,#172554,#0b1220)" : "linear-gradient(135deg,#064e3b,#0b1220)" }} />
              ))}
            </div>
          </div>
          <div className="p-6">
            <div className="text-xs text-slate-400">星河工業</div>
            <h1 className="text-2xl md:text-3xl font-semibold tracking-tight text-slate-100">高精密 CNC 加工中心 X500（保固移轉）</h1>
            <p className="mt-2 text-slate-300">設備良好，含 8 成新刀庫與校正紀錄。限台灣本島取貨，買方負擔運費與吊車。</p>
          </div>
        </div>

        <div className="rounded-lg ring-1 ring-slate-800 bg-slate-900 shadow">
          <div className="flex gap-6 px-6 pt-4 text-sm">
            <a className="font-medium border-b-2 border-transparent hover:border-slate-700 cursor-default text-slate-200">出價紀錄</a>
            <a className="font-medium border-b-2 border-transparent hover:border-slate-700 cursor-default text-slate-200">價格分布</a>
            <a className="font-medium border-b-2 border-transparent hover:border-slate-700 cursor-default text-slate-200">規則</a>
            <div className="ml-auto flex items-center gap-3 text-xs text-slate-400">
              <label className="flex items-center gap-2 cursor-pointer select-none"><input type="checkbox" checked={anonymize} onChange={e => setAnonymize(e.target.checked)} /> 匿名顯示</label>
            </div>
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 p-6">
            <div>
              <BidHistory bids={bids} anonymize={anonymize} />
            </div>
            <div>
              <div className="flex items-center justify-between mb-2">
                <div className="text-sm text-slate-400">價格分布（每 5 分鐘更新）</div>
                <div className="text-xs text-slate-500">上次更新：{new Date(Date.now() - 2 * 60 * 1000).toLocaleTimeString()}</div>
              </div>
              <Histogram buckets={MOCK_BUCKETS} p50={p50} p90={p90} p99={p99} />
              <div className="mt-2 text-xs text-slate-400">分位數：p50 {twd(p50)}｜p90 {twd(p90)}｜p99 {twd(p99)}</div>
            </div>
          </div>
          <div className="px-6 pb-6 text-sm text-slate-300">
            <ul className="list-disc pl-5 space-y-1">
              <li>英式（明標）加價競標，最小加價檔 {twd(10000)}。</li>
              <li>反狙擊：結束前 3 分鐘內有出價，結束時間自動延長 1 分鐘。</li>
              <li>賣家設定保留價：未達則可能流標或協商。</li>
            </ul>
          </div>
        </div>
      </div>

      {/* 右側出價面板 */}
      <div className="xl:col-span-4">
        <LiveBidPanel
          status={variant}
          currentPrice={currentPrice}
          minIncrement={minIncrement}
          endAt={endAt}
          reserveMet={reserveMet}
          buyNow={variant === "RUNNING" ? 800000 : null}
          anonymize={anonymize}
          onPlaceBid={placeBid}
          lastExtendedAt={lastExtendedAt}
        />
        {variant !== "RUNNING" && (
          <div className="mt-4 rounded-lg ring-1 ring-slate-800 bg-slate-900 p-4 text-sm text-slate-300 shadow">
            {variant === "SCHEDULED" && <p>此拍賣尚未開始。請於開始時間回來或設定提醒。</p>}
            {variant === "ENDED" && <p>拍賣已結束。若已達保留價，系統已通知得標者與賣家。</p>}
          </div>
        )}
      </div>
    </div>
  );
}

// ---------- 列表頁：含建立英式拍賣 + 搜尋/排序 + 卡片格狀 ----------
function CreateAuctionCard() {
  const [creating, setCreating] = useState(false);
  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault(); setCreating(true); setTimeout(() => { setCreating(false); alert("已送出建立申請（Demo）"); }, 700);
  }
  return (
    <div className="rounded-lg ring-1 ring-slate-800 bg-slate-900 shadow p-6">
      <h2 className="text-xl font-semibold text-slate-100 mb-1">建立英式拍賣</h2>
      <p className="text-slate-400 text-sm mb-4">為你的 listing 啟用拍賣模式（保留價 / 最小加價 / 反狙擊 / 匿名）。</p>
      <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm text-slate-300 mb-1">選擇 Listing</label>
          <select className="w-full rounded bg-slate-950 ring-1 ring-slate-800 px-3 py-2 text-slate-100">
            {MOCK_LIST.slice(0,5).map(x => <option key={x.id} value={x.id}>#{x.id} — {x.title}</option>)}
          </select>
          <p className="mt-1 text-xs text-slate-500">僅能對未拍賣中的 listing 建立。</p>
        </div>
        <div className="grid grid-cols-2 gap-3">
          <div>
            <label className="block text-sm text-slate-300 mb-1">開始時間</label>
            <input type="datetime-local" className="w-full rounded bg-slate-950 ring-1 ring-slate-800 px-3 py-2 text-slate-100" />
          </div>
          <div>
            <label className="block text-sm text-slate-300 mb-1">結束時間（≤61天）</label>
            <input type="datetime-local" className="w-full rounded bg-slate-950 ring-1 ring-slate-800 px-3 py-2 text-slate-100" />
          </div>
        </div>
        <div className="grid grid-cols-3 gap-3">
          <div>
            <label className="block text-sm text-slate-300 mb-1">保留價</label>
            <input type="number" placeholder="如：500000" className="w-full rounded bg-slate-950 ring-1 ring-slate-800 px-3 py-2 text-slate-100 placeholder-slate-600" />
          </div>
          <div>
            <label className="block text-sm text-slate-300 mb-1">最小加價</label>
            <input type="number" placeholder="如：10000" className="w-full rounded bg-slate-950 ring-1 ring-slate-800 px-3 py-2 text-slate-100 placeholder-slate-600" />
          </div>
          <div>
            <label className="block text-sm text-slate-300 mb-1">直購價（可選）</label>
            <input type="number" placeholder="空白代表不開放" className="w-full rounded bg-slate-950 ring-1 ring-slate-800 px-3 py-2 text-slate-100 placeholder-slate-600" />
          </div>
        </div>
        <div className="grid grid-cols-3 gap-3 text-sm">
          <label className="flex items-center gap-2 text-slate-300"><input type="checkbox" className="accent-cyan-500" /> 反狙擊：3 分內延長 60s</label>
          <label className="flex items-center gap-2 text-slate-300"><input type="checkbox" className="accent-cyan-500" /> 匿名化出價者</label>
          <label className="flex items-center gap-2 text-slate-300"><input type="checkbox" className="accent-cyan-500" defaultChecked /> 需達保留價才成交</label>
        </div>
        <div className="md:col-span-2 flex gap-3">
          <button type="submit" disabled={creating} className={cx("rounded-md bg-cyan-500 text-slate-900 px-5 py-2 font-semibold hover:bg-cyan-400", creating && "opacity-60 cursor-not-allowed")}>建立拍賣</button>
          <span className="text-xs text-slate-500 self-center">送出後可於「賣家後台」查看狀態</span>
        </div>
      </form>
    </div>
  );
}

function AuctionListPage({ onOpen }: { onOpen: (id: number) => void }) {
  const [q, setQ] = useState("");
  const [sort, setSort] = useState<"endingSoon" | "latest" | "priceAsc" | "priceDesc">("endingSoon");
  const items = useMemo(() => {
    let arr = MOCK_LIST.filter((x) => x.title.includes(q) || x.seller.includes(q));
    switch (sort) {
      case "endingSoon": arr = arr.sort((a, b) => a.endAt - b.endAt); break;
      case "latest": arr = arr.sort((a, b) => b.id - a.id); break;
      case "priceAsc": arr = arr.sort((a, b) => a.currentPrice - b.currentPrice); break;
      case "priceDesc": arr = arr.sort((a, b) => b.currentPrice - a.currentPrice); break;
    }
    return arr;
  }, [q, sort]);

  return (
    <div className="space-y-6">
      <CreateAuctionCard />
      <div className="rounded-lg ring-1 ring-slate-800 bg-slate-900 p-4 flex flex-col md:flex-row md:items-center gap-3">
        <div className="flex-1 flex gap-2">
          <input placeholder="搜尋標題或企業" value={q} onChange={e=>setQ(e.target.value)} className="flex-1 rounded bg-slate-950 ring-1 ring-slate-800 px-3 py-2 text-slate-100 placeholder-slate-600" />
        </div>
        <div className="flex items-center gap-2 text-sm">
          <span className="text-slate-400">排序</span>
          <select value={sort} onChange={e=>setSort(e.target.value as any)} className="rounded bg-slate-950 ring-1 ring-slate-800 px-2 py-1 text-slate-100">
            <option value="endingSoon">即將結束</option>
            <option value="latest">最新建立</option>
            <option value="priceAsc">價格由低至高</option>
            <option value="priceDesc">價格由高至低</option>
          </select>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {items.map(item => <AuctionCard key={item.id} item={item} onOpen={onOpen} />)}
      </div>
    </div>
  );
}

// ---------- 全頁容器 ----------
export default function AuctionUIScreen() {
  const [mode, setMode] = useState<"list" | "detail-running" | "detail-scheduled" | "detail-ended">("list");
  const [mobile, setMobile] = useState(false);

  return (
    <div className="min-h-screen bg-[radial-gradient(900px_400px_at_10%_-10%,rgba(34,211,238,.08),transparent_60%)] bg-slate-950 text-slate-100">
      {/* 頂部導覽 */}
      <header className="sticky top-0 z-10 backdrop-blur bg-slate-900/70 border-b border-slate-800">
        <div className="max-w-[1100px] mx-auto px-6 py-3 flex items-center gap-4">
          <div className="font-semibold tracking-tight text-lg">AuctiX</div>
          <nav className="hidden md:flex items-center gap-4 text-sm text-slate-400">
            <a className="hover:text-slate-100" href="#">瀏覽拍賣</a>
            <a className="hover:text-slate-100" href="#">我的競標</a>
            <a className="hover:text-slate-100" href="#">賣家後台</a>
          </nav>
          <div className="ml-auto flex items-center gap-3 text-sm">
            <div className="hidden sm:flex items-center gap-2 border border-slate-800 rounded px-2 py-1 bg-slate-900">
              <span className="text-slate-400">畫面模式</span>
              <select className="bg-transparent outline-none" value={mode} onChange={e => setMode(e.target.value as any)}>
                <option value="list">列表 / 建立拍賣</option>
                <option value="detail-running">詳情：進行中</option>
                <option value="detail-scheduled">詳情：未開始</option>
                <option value="detail-ended">詳情：已結束</option>
              </select>
            </div>
            <label className="flex items-center gap-2 cursor-pointer select-none border border-slate-800 rounded px-2 py-1 bg-slate-900">
              <input type="checkbox" checked={mobile} onChange={e => setMobile(e.target.checked)} /> 模擬手機寬度
            </label>
            <button className="rounded border border-slate-800 px-3 py-1.5 bg-slate-900 hover:bg-slate-800">登入</button>
          </div>
        </div>
      </header>

      {/* 內容 */}
      <main className="max-w-[1100px] mx-auto px-6 py-8">
        <div className={cx("mx-auto", mobile ? "max-w-[420px]" : "") }>
          {mode === "list" && <AuctionListPage onOpen={() => setMode("detail-running")} />}
          {mode === "detail-running" && <AuctionDetail variant="RUNNING" />}
          {mode === "detail-scheduled" && <AuctionDetail variant="SCHEDULED" />}
          {mode === "detail-ended" && <AuctionDetail variant="ENDED" />}
        </div>
      </main>

      {/* 頁尾 */}
      <footer className="border-t border-slate-800 py-8 text-sm text-slate-500">
        <div className="max-w-[1100px] mx-auto px-6 flex items-center justify-between">
          <div>© 2025 AuctiX Co.</div>
          <div className="flex gap-4">
            <a href="#" className="hover:text-slate-300">服務條款</a>
            <a href="#" className="hover:text-slate-300">隱私權政策</a>
          </div>
        </div>
      </footer>
    </div>
  );
}
